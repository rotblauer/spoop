<script>

	$(function () {
		var ccal = new CalHeatMap();

		var parser = function(data) {
		    var stats = {};
		    // console.log('data', data);
		    keys = Object.keys(data);
		    // console.log('keys', keys);
		    for (var d in keys) {
		        day = new Date((d));
		        dd = JSON.stringify(day);
		        stats[dd] = 1;
		    }
		    // console.log(stats);
		    return stats;
		};

		// is mobile small screen
		if (getResponsiveBreakpoint() === 'xs') {
			var _range = 1,
				  _cellSize = $(document).width() / 13,
				  _domainGutter = 5,
				  _verticalOrientation = true,
				  _startDate = new Date(gon.us_start_date.small),
				  _itemSelector = '#us-heatmap-xs',
				  _nextSelector = '#us-hm-next-xs',
				  _previousSelector = '#us-hm-previous-xs'
				  ;
		// is bigger screen
		} else {
			var _range = 4,
				  _cellSize = $(document).width() / 50,
				  _domainGutter = 10,
				  _verticalOrientation = false,
				  _startDate = new Date(gon.us_start_date.big),
				  _itemSelector = '#us-heatmap-xs',
				  _nextSelector = '#us-hm-next-bg',
				  _previousSelector = '#us-hm-previous-bg'
				  ;
		}

		ccal.init({
		    itemSelector: _itemSelector,
		    domain: 'month',
		    subDomain: 'x_day',
		    range: _range,
		    cellSize: _cellSize,
		    // domain: 'week',
		    // subDomain: 'hour',
		    // range: 60,
		    // cellSize: 5,
		    verticalOrientation: _verticalOrientation,
		    domainDynamicDimension: false,
		    legend: [1, 2, 3],
		    label: {'position': 'top'},
		    domainGutter: _domainGutter,
		    start: _startDate,
		    highlight: ["now"],
		    previousSelector: _previousSelector,
		    nextSelector: _nextSelector,
		    data: '/api/v1/donor_logs_heatmap'//JSON.parse(gon.us_heatmap) || null
		});

		$('#us-timebristolweight').highcharts({
		        credits: {
		              enabled: false
		        },
		    chart: {
		        type: 'bubble',
		        plotBorderWidth: 0,
		        zoomType: 'x'
		    },
		    legend: {
		        enabled: false
		    },
		    title: {
		        text: null //''
		    },
		    xAxis: {
		        type: 'datetime',
		        title: {
		            text: null//'Time'
		        },
		        lineWidth: 0,
		        minorGridLineWidth: 0,
		        lineColor: 'transparent',
		        // ...          
		        // labels: {
		        //     enabled: false
		        // },
		        minorTickLength: 0,
		        tickLength: 0,
		        gridLineColor: 'transparent'
		    },

		    yAxis: {
		        // startOnTick: false,
		        // endOnTick: false,
		        floor: 1,
		        ceiling: 7,
		        min: 1,
		        max: 7,
		        tickInteverval: 1,
		        title: {
		            text: null//'Bristol score'
		        },
		        labels: {
		            format: '{value}'
		        },
		        
		        lineWidth: 0,
		        gridLineWidth: 0,
		        minorGridLineWidth: 0,
		        lineColor: 'transparent',

		        maxPadding: 0.2,
		        plotLines: [{
		            color: 'black',
		            dashStyle: 'dot',
		            width: 2,
		            value: 5,
		            label: {
		                align: 'left',
		                style: {
		                    fontStyle: 'italic'
		                },
		                // text: 'Max acceptable',
		                x: 10
		            },
		            zIndex: 3
		        },{
		            color: 'black',
		            dashStyle: 'dot',
		            width: 2,
		            value: 3,
		            label: {
		                align: 'left',
		                style: {
		                    fontStyle: 'italic'
		                },
		                // text: 'Min acceptable',
		                x: 10
		            },
		            zIndex: 3
		        }]
		    },
		    plotOptions: {
		        series: {
		            dataLabels: {
		                enabled: false,
		                format: '{point.name}'
		            }
		        }
		    },
		    series: [{
		    	data: gon.us_timebristolweight
		    }]

		});

		// Trulia
		
		var W = $(document).width() * 0.7,//$("#us-trulia-testes").parent().width(), // bootsrap col-xs-12
					margin = { top: W * 0.05, right: W * 0.02, bottom: W * 0.05, left: W * 0.05},
		      width = (W) - margin.left - margin.right,
		      height = (W * 0.4) - margin.top - margin.bottom,
		      // width = 960 - margin.left - margin.right,
		      // height = 400 - margin.top - margin.bottom,
		      // width = 600 - margin.left - margin.right,
		      // height = 400 - margin.top - margin.bottom,
		      gridSize = Math.floor(width / 24),
		      legendElementWidth = gridSize*2,
		      labelSize = '1vh', //'0.5rem'
		      // buckets = 4, //9,
		      // original
		      // colors = ["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58"], // alternatively colorbrewer.YlGnBu[9]
		      // greens
		      // colors = ['#ffffe5','#f7fcb9','#d9f0a3','#addd8e','#78c679','#41ab5d','#238443','#006837','#004529'],
		      buckets = 4, 
		      // colors = ['#ffffcc','#d9f0a3','#addd8e','#78c679','#31a354','#006837'],
		      // colors = ['#fff','#d9f0a3','#addd8e','#78c679','#41ab5d','#238443','#006837','#004529'],
		      colors = [ '#ededed', '#dae289', '#9cc069', '#669d45', '#637939', '#3b6427'],
		      days = ["Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
		      times = ["1a", "2a", "3a", "4a", "5a", "6a", "7a", "8a", "9a", "10a", "11a", "12a", "1p", "2p", "3p", "4p", "5p", "6p", "7p", "8p", "9p", "10p", "11p", "12p"];
		      // datasets = ["data.tsv", "data2.tsv"];

		  // Select DOM element. 
		  var svg = d3.select("#us-trulia-testes").append("svg")
		      .attr("width", width + margin.left + margin.right)
		      .attr("height", height + margin.top + margin.bottom)
		      .append("g")
		      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
		  
		  // if (getResponsiveBreakpoint() === 'xs') {
		  // 	console.log('rotating svg');
		  // 	svg.attr("transform", "rotate(90)")
		  // 	svg.attr('transform', 'translate(' + height + ', 0)');

		  // }


		  var dayLabels = svg.selectAll(".dayLabel")
		      .data(days)
		      .enter().append("text")
		        .text(function (d) { return d; })
		        .attr("x", 0)
		        .attr("y", function (d, i) { return i * gridSize; })
		        .style("text-anchor", "end")
		        .style('font-size', labelSize)
		        .attr("transform", "translate(-6," + gridSize / 1.5 + ")")
		        .attr("class", function (d, i) { return ((i >= 0 && i <= 4) ? "dayLabel mono axis axis-workweek" : "dayLabel mono axis"); });

		  var timeLabels = svg.selectAll(".timeLabel")
		      .data(times)
		      .enter().append("text")
		        .text(function(d) { return d; })
		        .attr("x", function(d, i) { return i * gridSize; })
		        .attr("y", 0)
		        .style("text-anchor", "middle")
		        .style('font-size', labelSize)
		        .attr("transform", "translate(" + gridSize / 2 + ", -6)")
		        .attr("class", function(d, i) { return ((i >= 7 && i <= 16) ? "timeLabel mono axis axis-worktime" : "timeLabel mono axis"); });


		  // var rawData = JSON.parse(gon.trulia_data);
		  var rawData = gon.us_trulia_data;

		  // var heatmapChart = function(tsvFile) {
		  //   d3.tsv(tsvFile,
		  //   function(d) {
		  //     return {
		  //       day: +d.day,
		  //       hour: +d.hour,
		  //       value: +d.value
		  //     };
		  //   },
		  //   function(error, data) {
		  function draw(data) {

		      var colorScale = d3.scale.quantile()
		          .domain([0, buckets - 1, d3.max(data, function (d) { return d.value; })])
		          .range(colors);

		      var cards = svg.selectAll(".hour")
		          .data(data, function(d) {return d.day+':'+d.hour;});

		      cards.append("title");

		      cards.enter().append("rect")
		          .attr("x", function(d) { return (d.hour - 1) * gridSize; })
		          .attr("y", function(d) { return (d.day - 1) * gridSize; })
		          .attr("rx", 0)//4)
		          .attr("ry", 0)//4)
		          .attr("class", "hour bordered")
		          .attr("width", gridSize)
		          .attr("height", gridSize)
		          .style("fill", colors[0]);

		      cards.transition().duration(1000)
		          .style("fill", function(d) { return colorScale(d.value); });

		      cards.select("title").text(function(d) { return d.value; });
		      
		      cards.exit().remove();

		      var legend = svg.selectAll(".legend")
		          .data([0].concat(colorScale.quantiles()), function(d) { return d; });

		      legend.enter().append("g")
		          .attr("class", "legend");

		      legend.append("rect")
		        .attr("x", function(d, i) { return legendElementWidth * i; })
		        .attr("y", height)
		        .attr("width", legendElementWidth)
		        .attr("height", gridSize / 4)
		        .style("fill", function(d, i) { return colors[i]; });

		      legend.append("text")
		        .attr("class", "mono")
		        .style('font-size', '0.6rem')
		        // .attr('class', '')
		        .text(function(d) { return "â‰¥ " + Math.round(d); })
		        .attr("x", function(d, i) { return legendElementWidth * i; })
		        .attr("y", height + gridSize);

		      legend.exit().remove();

		    }

		    draw(rawData);

		    // $('#us-pie-products').highcharts({
		    //         credits: {
		    //               enabled: false
		    //         },
		    //         chart: {
		    //             plotBackgroundColor: null,
		    //             plotBorderWidth: null,
		    //             plotShadow: false,
		    //             type: 'pie'
		    //         },
		    //         title: {
		    //             text: 'Products created'
		    //         },
		    //         tooltip: {
		    //             pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
		    //         },
		    //         plotOptions: {
		    //             pie: {
		    //                 allowPointSelect: true,
		    //                 cursor: 'pointer',
		    //                 dataLabels: {
		    //                     enabled: true,
		    //                     format: '<b>{point.name}</b>: {point.y}',
		    //                     style: {
		    //                         color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
		    //                     }
		    //                 }
		    //             }
		    //         },
		    //         series: [
		    //         {
		    //             name: 'Products',
		    //             colorByPoint: true,
		    //             data: gon.us_pie_charts_products
		    //         }]
		    //     });

		    $(function () {
		        $('#us-stacked-bar').highcharts({
		        		credits: {
		        			enabled: false
		        		},
		            chart: {
		                type: 'bar',
		                height: 220,
		            },
		            title: {
		                text: null//'Poos lately'
		            },
		            xAxis: {
		                categories: ['Week', 'Month', '2 Mo.', 'âˆž'],
		                // ...  
		                 lineWidth: 0,
		                 minorGridLineWidth: 0,
		                 lineColor: 'transparent',
		                 // ...          
		                 // labels: {
		                 //     enabled: false
		                 // },
		                 minorTickLength: 0,
		                 tickLength: 0,
		                 gridLineColor: 'transparent'
		            },
		            yAxis: {
		                min: 0,
		                title: {
		                    text: null,//'Total poos'
		                },
		                tickInterval: 2,
		                // ...  
		                 lineWidth: 0,
		                 gridLineWidth: 0,
		                 minorGridLineWidth: 0,
		                 lineColor: 'transparent',
		                 // ...          
		                 // labels: {
		                 //     enabled: false
		                 // },
		                 minorTickLength: 0,
		                 tickLength: 0
		            },
		            legend: {
		                reversed: true,
		                borderColor: 'transparent',
		                borderWidth: 0
		            },
		            plotOptions: {
		                series: {
		                    stacking: 'normal'
		                }
		            },
		            series: [
		            
		            {
		                name: 'Rejected',
		                color: '#d9534f',
		                data: [gon.count_week['rejected'], gon.count_month['rejected'], gon.count_two_months['rejected']] //gon.count_all_time['rejected']]
		            },
		            {
		                name: 'Not donated',
		                color: '#F89406',
		                data: [gon.count_week['not_donated'], gon.count_month['not_donated'], gon.count_two_months['not_donated']] //gon.count_all_time['not_donated']]
		            },
		            {
		                name: 'Processed',
		                color: '	#5cb85c',
		                data: [gon.count_week['processable'], gon.count_month['processable'], gon.count_two_months['processable']] //gon.count_all_time['processable']]
		            } 
		            
		            
		            ]
		        });
		    });
	});

</script>