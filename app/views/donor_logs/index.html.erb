<div class="row fat-vert">
  <div class="col-sm-3 infogram text-xs-center">
    <p class="text-muted">
      Poos donated
    </p>
    <h1 class='text-success '>
      <%= @donor_logs.processed.count %><sub class="text-danger" style="font-size: .3em; font-weight: lighter;"><%= @donor_logs.where(processable: false).count %></sub>
    </h1>
  </div>
  <div class="col-sm-3 infogram text-xs-center">
    <p class="text-muted">
      Poo donated
    </p>
    <h1 class='text-success '>
      <%= (@dls_statsable.sum(&:weight) / 453.592).round(1) %><small>lbs</small>
    </h1>
  </div>
  <div class="col-sm-3 infogram text-xs-center">
    <p class="text-muted">
      Gross income
    </p>
    <h1 class='text-success '>
      $<%= @donor_logs.processed.count * 40 %>
    </h1>
  </div>
  
</div>

<div class="row fat-vert">
  
  <div class="col-sm-1" style="padding-top: 100px;">
    <button id="hm-previous-dl" class="btn btn-sm btn-success-outline pull-xs-left"><span class="fa fa-angle-double-left"></span></button>
  </div>

  <div class="col-sm-10" >
    <div id="heatmap-dl"></div>
  </div>

  <div class="col-sm-1" style="padding-top: 100px;">
    <button id="hm-next-dl" class="btn btn-sm btn-success-outline pull-xs-right"><span class="fa fa-angle-double-right"></span></button>
  </div>

</div>

<div class="row fat-vert">
<div class="col-sm-12 infogram text-xs-center">
  <p class="text-muted">Time / bristol / weight</p>
  <div id="timebristolweight-dl"></div>
</div>
</div>


<div class="row fat-vert">
<div class="col-sm-12 infogram text-xs-center">
  <p class="text-muted">Poos / weekday / hour</p>
  <!-- <div id="punchcard"></div> -->
  <div class="row">
    <div class="col-sm-12">
      <style>
            rect.bordered {
              stroke: #E6E6E6;
              stroke-width:2px;   
            }
      
            text.mono {
              font-size: 9pt;
              font-family: Consolas, courier;
              fill: #aaa;
            }
      
            text.axis-workweek {
              fill: #000;
            }
      
            text.axis-worktime {
              fill: #000;
            }
          </style>
      <div id="trulia-testes-dl"></div>
    </div>
  </div>
</div>
</div>


<!-- <div class="row">
  <div class="col-sm-6">
    <%# scatter_chart @plucked %>
  </div>
</div> -->

<hr>


<div class="table-responsive">
  <table class="table table-hover table-sm">
    <thead class="thead-inverse">
      <tr>
        <th>UserID</th>
        <th>Bristol score</th>
        <th>Weight</th>
        <th>Donated</th>
        <th>Processable</th>
        <th>Notes</th>
        <th>Time of passage</th>
        <th>Date of passage</th>
        <th colspan="3"></th>
      </tr>
    </thead>
  
    <tbody>
      <% @donor_logs.each do |donor_log| %>
        <tr>
          <td><%= donor_log.user_id %></td>
          <td><%= donor_log.bristol_score %></td>
          <td><%= donor_log.weight %></td>
          <td><%= donor_log.donated %></td>
          <td><%= donor_log.processable %></td>
          <td><%= donor_log.notes %></td>
          <td><%= donor_log.time_of_passage %></td>
          <td><%= donor_log.date_of_passage %></td>
          <td><%= link_to 'Show', user_donor_log_path(donor_log.user, donor_log) %></td>
          <td><%= link_to 'Edit', edit_user_donor_log_path(donor_log.user, donor_log) %></td>
          <td><%= link_to 'Destroy', user_donor_log_path(donor_log.user, donor_log), method: :delete, data: { confirm: 'Are you sure?' } %></td>
        </tr>
      <% end %>
    </tbody>
  </table>
</div>

<br>

<%= link_to 'New Donor log', new_user_donor_log_path(@user) %>


<script>
  // # Place all the behaviors and hooks related to the matching controller here.
  // # All this logic will automatically be available in application.js.
  // # You can use CoffeeScript in this file: http://coffeescript.org/

  console.log('gon noggin');

  $(function () {

      var cal_donor_logs = new CalHeatMap();

      var parser = function(data) {
          var stats = {};
          // console.log('data', data);
          keys = Object.keys(data);
          // console.log('keys', keys);
          for (var d in keys) {
              day = new Date((d));
              dd = JSON.stringify(day);
              stats[dd] = 1;
          }
          // console.log(stats);
          return stats;
      };

      cal_donor_logs.init({
          itemSelector: '#heatmap-dl',
          domain: 'month',
          subDomain: 'x_day',
          range: 4,
          cellSize: 30,
          // domain: 'week',
          // subDomain: 'hour',
          // range: 60,
          // cellSize: 5,
          domainDynamicDimension: false,
          legend: [1, 2, 3],
          label: {'position': 'top'},
          domainGutter: 10,
          start: new Date(gon.dl_startDate),
          highlight: ["now"],
          previousSelector: '#hm-previous-dl',
          nextSelector: '#hm-next-dl',
          data: JSON.parse(gon.dl_json_heater) || null
      });

    

      $('#timebristolweight-dl').highcharts({
              credits: {
                    enabled: false
              },
          chart: {
              type: 'bubble',
              plotBorderWidth: 1,
              zoomType: 'xy'
          },
          legend: {
              enabled: false
          },
          title: {
              text: ''
          },
          xAxis: {
              type: 'datetime',
              title: {
                  text: 'Time'
              }
          },

          yAxis: {
              // startOnTick: false,
              // endOnTick: false,
              floor: 1,
              ceiling: 7,
              min: 1,
              max: 7,
              tickInteverval: 1,
              title: {
                  text: 'Bristol score'
              },
              labels: {
                  format: '{value}'
              },
              maxPadding: 0.2,
              plotLines: [{
                  color: 'black',
                  dashStyle: 'dot',
                  width: 2,
                  value: 5,
                  label: {
                      align: 'left',
                      style: {
                          fontStyle: 'italic'
                      },
                      text: 'Max acceptable',
                      x: 10
                  },
                  zIndex: 3
              },{
                  color: 'black',
                  dashStyle: 'dot',
                  width: 2,
                  value: 3,
                  label: {
                      align: 'left',
                      style: {
                          fontStyle: 'italic'
                      },
                      text: 'Min acceptable',
                      x: 10
                  },
                  zIndex: 3
              }]
          },
          plotOptions: {
              series: {
                  dataLabels: {
                      enabled: false,
                      format: '{point.name}'
                  }
              }
          },
          series: [{
          data: gon.dl_don
          }]

      });

      // // Trulia
      // var margin = { top: 50, right: 0, bottom: 100, left: 30 },
      // // var margin = { top: 0, right: 0, bottom: 0, left: 0},
      //           width = 960 - margin.left - margin.right,
      //           height = 430 - margin.top - margin.bottom,
      //           // width = 600 - margin.left - margin.right,
      //           // height = 400 - margin.top - margin.bottom,
      //           gridSize = Math.floor(width / 24),
      //           legendElementWidth = gridSize*2,
      //           // buckets = 4, //9,
      //           // original
      //           // colors = ["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58"], // alternatively colorbrewer.YlGnBu[9]
      //           // greens
      //           // colors = ['#ffffe5','#f7fcb9','#d9f0a3','#addd8e','#78c679','#41ab5d','#238443','#006837','#004529'],
      //           buckets = 4, 
      //           // colors = ['#ffffcc','#d9f0a3','#addd8e','#78c679','#31a354','#006837'],
      //           colors = ['#ffffe5','#f7fcb9','#d9f0a3','#addd8e','#78c679','#41ab5d','#238443','#006837','#004529'],
      //           days = ["Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
      //           times = ["1a", "2a", "3a", "4a", "5a", "6a", "7a", "8a", "9a", "10a", "11a", "12a", "1p", "2p", "3p", "4p", "5p", "6p", "7p", "8p", "9p", "10p", "11p", "12p"];
      //           // datasets = ["data.tsv", "data2.tsv"];

      //       // Select DOM element. 
      //       var svg = d3.select("#trulia-testes-dl").append("svg")
      //           .attr("width", width + margin.left + margin.right)
      //           .attr("height", height + margin.top + margin.bottom)
      //           .append("g")
      //           .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

      //       var dayLabels = svg.selectAll(".dayLabel")
      //           .data(days)
      //           .enter().append("text")
      //             .text(function (d) { return d; })
      //             .attr("x", 0)
      //             .attr("y", function (d, i) { return i * gridSize; })
      //             .style("text-anchor", "end")
      //             .attr("transform", "translate(-6," + gridSize / 1.5 + ")")
      //             .attr("class", function (d, i) { return ((i >= 0 && i <= 4) ? "dayLabel mono axis axis-workweek" : "dayLabel mono axis"); });

      //       var timeLabels = svg.selectAll(".timeLabel")
      //           .data(times)
      //           .enter().append("text")
      //             .text(function(d) { return d; })
      //             .attr("x", function(d, i) { return i * gridSize; })
      //             .attr("y", 0)
      //             .style("text-anchor", "middle")
      //             .attr("transform", "translate(" + gridSize / 2 + ", -6)")
      //             .attr("class", function(d, i) { return ((i >= 7 && i <= 16) ? "timeLabel mono axis axis-worktime" : "timeLabel mono axis"); });


      //       // var rawData = JSON.parse(gon.trulia_data);
      //       var rawData = gon.dl_trulia_data;

      //       // var heatmapChart = function(tsvFile) {
      //       //   d3.tsv(tsvFile,
      //       //   function(d) {
      //       //     return {
      //       //       day: +d.day,
      //       //       hour: +d.hour,
      //       //       value: +d.value
      //       //     };
      //       //   },
      //       //   function(error, data) {
      //       function draw(data) {

      //           var colorScale = d3.scale.quantile()
      //               .domain([0, buckets - 1, d3.max(data, function (d) { return d.value; })])
      //               .range(colors);

      //           var cards = svg.selectAll(".hour")
      //               .data(data, function(d) {return d.day+':'+d.hour;});

      //           cards.append("title");

      //           cards.enter().append("rect")
      //               .attr("x", function(d) { return (d.hour - 1) * gridSize; })
      //               .attr("y", function(d) { return (d.day - 1) * gridSize; })
      //               .attr("rx", 4)
      //               .attr("ry", 4)
      //               .attr("class", "hour bordered")
      //               .attr("width", gridSize)
      //               .attr("height", gridSize)
      //               .style("fill", colors[0]);

      //           cards.transition().duration(1000)
      //               .style("fill", function(d) { return colorScale(d.value); });

      //           cards.select("title").text(function(d) { return d.value; });
                
      //           cards.exit().remove();

      //           var legend = svg.selectAll(".legend")
      //               .data([0].concat(colorScale.quantiles()), function(d) { return d; });

      //           legend.enter().append("g")
      //               .attr("class", "legend");

      //           legend.append("rect")
      //             .attr("x", function(d, i) { return legendElementWidth * i; })
      //             .attr("y", height)
      //             .attr("width", legendElementWidth)
      //             .attr("height", gridSize / 2)
      //             .style("fill", function(d, i) { return colors[i]; });

      //           legend.append("text")
      //             .attr("class", "mono")
      //             .text(function(d) { return "≥ " + Math.round(d); })
      //             .attr("x", function(d, i) { return legendElementWidth * i; })
      //             .attr("y", height + gridSize);

      //           legend.exit().remove();

      //         }

      //         draw(rawData);
  });

</script>